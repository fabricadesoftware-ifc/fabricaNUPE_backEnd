stages:
    - build
    - test
    - deploy

variables:
    GIT_STRATEGY: fetch
    DOCS_PATH: docs/_build/html
    DOCUMENTATION_URL: nupe-documentation.surge.sh

backend_image push to container_registry:
    image: docker:19.03.12
    stage: build
    services:
        - docker:19.03.12-dind
    variables:
        IMAGE_TAG: $CI_REGISTRY_IMAGE/nupe:backend
    before_script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - docker build --pull -t $IMAGE_TAG -f dev_backend.Dockerfile .
    script: docker push $IMAGE_TAG
    rules:
        # - if: $CI_COMMIT_BRANCH == "develop"
        - changes:
              - dev_backend.Dockerfile

dev_backend test:
    image: $CI_REGISTRY_IMAGE/nupe:backend
    stage: test
    script: python manage.py test
    rules:
        # - if: $CI_COMMIT_BRANCH == "develop"
        - changes:
              - manage.py
              - nupe/**/*
          allow_failure: true

docs build:
    image: $CI_REGISTRY_IMAGE/nupe:backend
    stage: build
    script: make -C docs/ html
    artifacts:
        name: docs
        paths:
            - $DOCS_PATH
        expire_in: 1h
    rules:
        # - if: $CI_COMMIT_BRANCH == "develop"
        - changes:
              - docs/**/*
    cache:
        key: docs build
        policy: push
        paths:
            - $DOCS_PATH

docs deploy:
    image: node
    stage: deploy
    variables:
        GIT_STRATEGY: none
    before_script:
        - npm install -g surge
    script: surge -p $DOCS_PATH -d $DOCUMENTATION_URL
    # rules:
    #     - if: $CI_COMMIT_BRANCH == "develop"
    cache:
        key: docs build
        policy: pull
    environment:
        name: docs-nupe
        url: $DOCUMENTATION_URL
    needs:
        - docs build
